services:
  postgres:
    image: postgres:17
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres

  kafka-1:
    image: apache/kafka:latest
    container_name: kafka-1
    restart: unless-stopped
    ports:
      - 19092:19092
    environment:
      # Shared setup
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:19092,CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9093,2@kafka-2:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # Broker setup
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    healthcheck:
      test:
        [
          'CMD',
          '/opt/kafka/bin/kafka-topics.sh',
          '--bootstrap-server',
          'localhost:9092',
          '--list',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka-2:
    image: apache/kafka:latest
    container_name: kafka-2
    restart: unless-stopped
    ports:
      - 29092:29092
    environment:
      # Shared setup
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092,CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9093,2@kafka-2:9093
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # Broker setup
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
    healthcheck:
      test:
        [
          'CMD',
          '/opt/kafka/bin/kafka-topics.sh',
          '--bootstrap-server',
          'localhost:9092',
          '--list',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  init-topics:
    image: apache/kafka:latest
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
    environment:
      BOOTSTRAP_SERVERS: kafka-1:9092
    entrypoint: >
      bash -c '
        echo "Waiting for Kafka to be ready...";
        for i in {1..30}; do
          /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka-1:9092 --list && break || sleep 2;
        done;
        echo "Creating topics...";
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka-1:9092 --topic position_topic --partitions 1 --replication-factor 1 &&
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka-1:9092 --topic time_registration_topic --partitions 1 --replication-factor 1 &&
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka-1:9092 --topic report_topic --partitions 1 --replication-factor 1 &&
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka-1:9092 --topic entity_topic --partitions 1 --replication-factor 1;
        echo "Kafka initialization complete.";'

  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_VERSION:-latest}
    restart: unless-stopped
    ports:
      - 8085:8085
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka-1:9092'
      SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8085'
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'

  akhq:
    image: tchiotludo/akhq
    volumes:
      - /opt/tibco/akd/repo/1.2/lib/tibftl-kafka-avro-1.2.0-thin.jar:/app/tibftl-kafka-avro-1.2.0-thin.jar
      - /opt/tibco/akd/repo/1.2/lib/deps:/app/deps
    restart: unless-stopped
    depends_on:
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka-1:9092"
              schema-registry:
                url: "http://schema-registry:8085"
      CLASSPATH: '/app/tibftl-kafka-avro-1.2.0-thin.jar:/app/deps/*'
    ports:
      - 8080:8080
    links:
      - kafka-1
      - kafka-2
      - schema-registry

  minio:
    image: 'minio/minio:latest'
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=password
      - MINIO_REGION_NAME=us-east-1
      - MINIO_REGION=us-east-1
    
    command: 'minio server /data --console-address ":9001"'
    healthcheck:
      test:
        - CMD
        - curl
        - '-f'
        - 'http://localhost:9000/minio/health/live'
      retries: 3
      timeout: 5s

  init-minio:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      until (mc alias set myminio http://minio:9000 minio password); do echo 'Waiting for MinIO...'; sleep 3; done;
      mc mb myminio/kafkamion;
      mc anonymous set public myminio/kafkamion;
      echo 'Bucket created and policie set!';
      "

  download-hive-plugin:
    image: alpine:latest
    container_name: download-hive-plugin
    command: >
      /bin/sh -c "
      wget -O /jars/aws-java-sdk-bundle-1.11.1026.jar https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-bundle/1.11.1026/aws-java-sdk-bundle-1.11.1026.jar &&
      wget -O /jars/hadoop-aws-3.3.6.jar https://repo1.maven.org/maven2/org/apache/hadoop/hadoop-aws/3.3.6/hadoop-aws-3.3.6.jar"
    volumes:
      - ./config/hive/plugin:/jars

  hive-metastore:
    image: apache/hive:4.0.1
    container_name: hive-metastore
    environment:
      SERVICE_NAME: metastore
    depends_on:
      download-hive-plugin:
        condition: service_completed_successfully
    ports:
      - '9083:9083'
    volumes:
      - ./config/hive/plugin/aws-java-sdk-bundle-1.11.1026.jar:/opt/hive/lib/aws-java-sdk-bundle-1.11.1026.jar
      - ./config/hive/plugin/hadoop-aws-3.3.6.jar:/opt/hive/lib/hadoop-aws-3.3.6.jar
      - ./config/hive/hive-site.xml:/opt/hive/conf/hive-site.xml

  trino:
    image: trinodb/trino:latest
    container_name: trino
    restart: unless-stopped
    depends_on:
      - hive-metastore
    ports:
      - 8081:8080
    volumes:
      - ./config/trino/catalog:/etc/trino/catalog

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - kafka-1